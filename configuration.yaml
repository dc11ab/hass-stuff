homeassistant:
  # Name of the location where Home Assistant is running
  name: Cervera's Home
  # Location required to calculate the time the sun rises and sets
  latitude: !secret lat_home
  longitude: !secret lon_home
  # Impacts weather/sunrise data (altitude above sea level in meters)
  elevation: !secret elevation_home
  # metric for Metric, imperial for Imperial
  unit_system: metric
  # Pick yours from here: http://en.wikipedia.org/wiki/List_of_tz_database_time_zones
  time_zone: Europe/Stockholm

# Show links to resources in log and frontend
introduction:

# Enables the frontend
frontend:

http:
  # Uncomment this to add a password (recommended!)
  # api_password: PASSWORD
  # Uncomment this if you are using SSL or running in Docker etc
  # base_url: example.duckdns.org:8123i
    # api_password: !secret api_password #remember to add it too!
    # base_url: hass.exampl.es:8123
    # ssl_certificate: /etc/openssl/live/hass.exampl.es/fullchain.pem
    # ssl_key: /etc/openssl/live/hass.exampl.es/privkey.pem
    # trusted_networks:
    #   - 127.0.0.1
    #   - 192.168.11.0/24
    #   - ::1
    # ip_ban_enabled: True
    # login_attempts_threshold: 4

# Checks for available updates
updater:

# Discover some devices automatically
discovery:

# Allows you to issue voice commands from the frontend in enabled browsers
conversation:

# Enables support for tracking state changes over time.
history:

# View all events in a logbook
logbook:

# Notifications
notify:
  - name: husarbot
    platform: telegram
    api_key: !secret telegram_bot_api
    chat_id: !secret my_telegram_id

# Track the sun
sun:

# Weather Prediction
sensor:
  - platform: yr
 # DEV BETA Sensor temp from Daikin HVAC
  - platform: command_line
    name: In
    command: curl --data "id=&spw=&por" http://192.168.11.27/aircon/get_sensor_info | grep -oP '(?<=htemp\=).*(?=,hhum)'
    unit_of_measurement: "°C"
    interval: 600   
  - platform: command_line
    name: Out
    command: curl --data "id=&spw=&por" http://192.168.11.27/aircon/get_sensor_info | grep -oP '(?<=otemp\=).*(?=,err)'
    unit_of_measurement: "°C" 
    interval: 300

# Text to speech
tts:
  platform: google

# Webcams
camera:
  - platform: mjpeg
    mjpeg_url: http://192.168.11.90/mjpg/video.mjpg
    name: ccam

# Device tracking
device_tracker:
  - platform: ddwrt
    host: 192.168.11.1
    username: root
    password: !secret router_password
    name: router

# Commands
shell_command:
#  name: 'Turn fan silent'
  fan_silent: 'curl --data "pow=1&mode=4&stemp=23.0&shum=0&f_rate=B&f_dir=0" 192.168.11.27/aircon/set_control_info'
#  name: 'Turn fan normal'
  fan_normal: 'curl --data "pow=1&mode=4&stemp=23.0&shum=0&f_rate=4&f_dir=0" 192.168.11.27/aircon/set_control_info'

automation:
  - alias: 'silence fan at bedtime'
    trigger:
      platform: time
      after: '22:00:00'
    condition:
      condition: time
      after: '22:00:00'
      before: '01:00:00'
    action:
      - service: shell_command.fan_silent
      - service: notify.husarbot
        data:
          message: 'Setting fan to silent'

  - alias: 'set fan to normal operation'
    trigger:
      platform: time
      after: '01:01:00'
    condition:
      condition: time
      after: '01:00:01'
      before: '22:00:00'
    action:
      - service: shell_command.fan_normal
      - service: notify.husarbot
        data:
          message: 'Setting fan to normal'

  - alias: 'HASS update notification'
    trigger:
        platform: state
        entity_id: updater.updater
    action:
      service: notify.husarbot
      data: 
        title: 'New Home Assistant Release'
        message: "Home Assistant  {{ states.updater.updater.state }}  is now available."
